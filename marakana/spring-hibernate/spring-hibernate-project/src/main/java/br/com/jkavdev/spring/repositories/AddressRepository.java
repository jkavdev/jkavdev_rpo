package br.com.jkavdev.spring.repositories;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

import br.com.jkavdev.spring.contacts.entities.Address;

public class AddressRepository {

	private final DataSource dataSource;

	public AddressRepository() {
		try {
			Context context = new InitialContext();
			try {
				dataSource = (DataSource) context.lookup("java:comp/env/jdbc/spring-hibernateDS");
			} finally {
				context.close();
			}
		} catch (NamingException e) {
			throw new RuntimeException(e);
		}
	}

	// criara a tabela no banco
	public void init() throws SQLException {
		Connection connection = dataSource.getConnection();
		try {
			Statement statement = connection.createStatement();
			try {
				String sql = "create table address " + 
								"(	id integer generated by default as identity primary key, " +
								"	street varchar(255), " + 
								"	city varchar(255), " + 
								"	state varchar(255), " + 
								"	zip varchar(255) )";
				statement.execute(sql);
			} finally {
				statement.close();
			}
		} finally {
			connection.close();
		}
	}

	public Address find(long id) throws SQLException {
		// realizando busca no banco, e tratando todas as exceptions que podem
		// ser lançadas
		Connection connection = dataSource.getConnection();
		try {
			Statement statement = connection.createStatement();
			try {
				ResultSet resultSet = statement.executeQuery("select * from address where id = " + id);
				try {
					if (!resultSet.next()) {
						return null;
					} else {
						return unmarshal(resultSet);
					}
				} finally {
					resultSet.close();
				}
			} finally {
				statement.close();
			}
		} finally {
			connection.close();
		}
	}

	public void create(Address address) throws SQLException {
		Connection connection = dataSource.getConnection();
		try {
			Statement statement = connection.createStatement();
			try {
				String sql = "insert into address (street, city, state, zip) values ('" + 
								address.getStreet() + "', '" + 
								address.getCity() + "', '" + 
								address.getState() + "', '" + 
								address.getZip() + "')";
				statement.executeUpdate(sql, Statement.RETURN_GENERATED_KEYS);
				ResultSet generatedKeys = statement.getGeneratedKeys();
				try {
					if (generatedKeys.next())
						address.setId(generatedKeys.getLong("id"));
				} finally {
					generatedKeys.close();
				}
			} finally {
				statement.close();
			}
		} finally {
			connection.close();
		}
	}

	public void update(Address address) throws SQLException {
		Connection connection = dataSource.getConnection();
		try {
			Statement statement = connection.createStatement();
			try {
				String sql = "update address set "
						+ "street='" + address.getStreet() 
						+ "', city='" + address.getCity() 
						+ "', state='" + address.getState() 
						+ "', zip='" + address.getZip()
						+ "' where id=" + address.getId();
				statement.executeUpdate(sql);
			} finally {
				statement.close();
			}
		} finally {
			connection.close();
		}
	}

	public void delete(Address address) throws SQLException {
		Connection connection = dataSource.getConnection();
		try {
			Statement statement = connection.createStatement();
			try {
				statement.executeUpdate("delete from address where id=" + address.getId());
			} finally {
				statement.close();
			}
		} finally {
			connection.close();
		}
	}

	// criação do objeto devolvido, de acordo com cada linha que encontrar no
	// resulset
	private static Address unmarshal(ResultSet resultSet) throws SQLException {

		Address address = new Address();
		address.setId(resultSet.getLong("id"));
		address.setStreet(resultSet.getString("street"));
		address.setCity(resultSet.getString("city"));
		address.setState(resultSet.getString("state"));
		address.setZip(resultSet.getString("zip"));

		return address;
	}

}
