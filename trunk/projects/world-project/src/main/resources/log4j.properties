##Logger: é o cara que recebe as solicitações de log. Podemos criar um logger para cada classe da aplicação, porém o framework já fornece uma padrão caso não seja informado nenhum.Appender: os Loggers eles precisam saber para quem enviar as informações que recebeu, e ai os Appenders faz o trabalho dele, dizendo : \u201CLogger, passe as informações que você recebeu para mim, que eu saberei o que fazer com elas\u201D.
##Com o appender podemos decidir, salvar as informações de Logger em um arquivo, imprimir no console, enviar via e-mail etc.
##Layout: precisamos definir o formato que estas informações serão armazenadas para isso precisamos de layout. Podemos, organizar em um formato HTML, Simple text etc. Com o layout podemos definir data e hora, linha onde o log foi gerado etc.
#
##DEBUG < INFO < WARN < ERROR < FATAL
#
#
##### Usando 2 appenders, 1 para logar no console, outro para um arquivo
##informando que o nivel de log sera de debug para todos 
#log4j.rootCategory=DEBUG,stdout,fileOut
#
## Imprime somente mensagens com \u2018priority\u2019 WARN ou mais alto para o logger
##lembrando a ordem: DEBUG \u2013 INFO \u2013 WARN \u2013 ERROR \u2013 FATAL
##definindo um log com nivel de log INFO
#log4j.category.lopes=INFO
#
##### O primeiro appender escreve no console
#log4j.appender.stdout=org.apache.log4j.ConsoleAppender
#log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
#
#### Pattern que mostra o nome do arquivo e numero da linha, porem sem data e hora
#log4j.appender.stdout.layout.ConversionPattern=%5p [%t] (%F:%L) - %m%n
#
##### O segundo appender escreve em um arquivo e faz um bkp ao atingir o max
#log4j.appender.fileOut =org.apache.log4j.RollingFileAppender
#log4j.appender.fileOut.File=camilolog.log
#
#### Controla o tamanho maximo do arquivo
#log4j.appender.fileOut.MaxFileSize=100KB
#
#### Faz backup dos arquivos de log (apenas 1)
#log4j.appender.fileOut.MaxBackupIndex=1
#log4j.appender.fileOut.layout=org.apache.log4j.PatternLayout
#
######este formato esta em ingles: 2011-04-24 e imprime o nro da linha L
#log4j.appender.fileOut.layout.ConversionPattern=%d [%t] %5p %c:%L - %m%n
##log4j.appender.fileOut.layout.ConversionPattern=%d [%t] %5p %F:%L - %m%n
#		
#####imprime no formato dia/mes/ano
##log4j.appender.fileOut.layout.ConversionPattern=%-2d{dd/MM/yy HH:mm} [%t] %5p %c:%L - %m%n
#

 
log4j.rootCategory=INFO,stdout,fileOut
log4j.category.lopes=INFO

log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%5p [%t] (%F:%L) - %m%n

log4j.appender.fileOut =org.apache.log4j.RollingFileAppender
log4j.appender.fileOut.File=loggs.log
log4j.appender.fileOut.MaxFileSize=100KB
log4j.appender.fileOut.MaxBackupIndex=1
log4j.appender.fileOut.layout=org.apache.log4j.PatternLayout
log4j.appender.fileOut.layout.ConversionPattern=%d [%t] %5p %c:%L - %m%n


